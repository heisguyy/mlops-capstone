name: continuous-deployment
on:
  push:
    branches:
      - 'main'

env:
  AWS_DEFAULT_REGION: 'eu-central-1'
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  WANDB_KEY: ${{ secrets.WANDB_KEY }}

jobs:
  build-push-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repo
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      # Define the infrastructure
      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false
      - name: TF plan
        id: tf-plan
        working-directory: 'infrastructure'
        run: |
          terraform init -backend-config="key=mlops-capstone-prod.tfstate" -reconfigure && terraform plan -var-file=vars/prod.tfvars
      - name: TF Apply
        id: tf-apply
        working-directory: '06-best-practices/code/infrastructure'
        if: ${{ steps.tf-plan.outcome }} == 'success'
        run: |
          terraform apply -auto-approve -var-file=vars/prod.tfvars
          echo "::set-output name=logs_bucket::$(terraform output logs_bucket | xargs)"
          echo "::set-output name=endpoint_url::$(terraform output endpoint_url | xargs)"
          echo "::set-output name=ecr_repo::$(terraform output ecr_repo | xargs)"
          echo "::set-output name=lambda_function::$(terraform output lambda_function | xargs)"

      # Build-Push
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build, tag, and push image to Amazon ECR
        id: build-image-step
        working-directory: "06-best-practices/code"
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ steps.tf-apply.outputs.ecr_repo }}
          IMAGE_TAG: "latest"
        run: |
          docker build -t ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG} .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image_uri::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      # Deploy
      - name: Update Lambda
        env:
          LAMBDA_FUNCTION: ${{ steps.tf-apply.outputs.lambda_function }}
          WANDB_KEY: ${{ env.WANDB_KEY }}
          MODEL_MONITOR_S3_BUCKET: ${{ steps.tf-apply.outputslogs_bucket }}
        run: |
          variables="{ \
                    MODEL_MONITOR_S3_BUCKET=$MODEL_MONITOR_S3_BUCKET, WANDB_KEY=$WANDB_KEY \
                    }"
          STATE=$(aws lambda get-function --function-name $LAMBDA_FUNCTION --region "eu-central-1" --query 'Configuration.LastUpdateStatus' --output text)
              while [[ "$STATE" == "InProgress" ]]
              do
                  echo "sleep 5sec ...."
                  sleep 5s
                  STATE=$(aws lambda get-function --function-name $LAMBDA_FUNCTION --region "eu-central-1" --query 'Configuration.LastUpdateStatus' --output text)
                  echo $STATE
              done
          aws lambda update-function-configuration --function-name $LAMBDA_FUNCTION \
                    --environment "Variables=${variables}"
